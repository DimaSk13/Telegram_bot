from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from keyboards import get_keyboard, get_inline_keyboard, get_cancel
from function import Rock_Paper_Scissors
from config import *

#—Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot= bot, storage=storage)

#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Anketa_states_group(StatesGroup):
    photo = State()
    name = State()
    age = State()
    desc = State()

#–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message) -> None:
    await message.answer(text = "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start!", reply_markup=get_keyboard())
    await message.delete()

#–æ—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã, —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands=['cancel'], state='*')
async def cancel_command(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await message.answer(text='–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ',
                         reply_markup=get_keyboard())
    await state.finish()

#–Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É
@dp.message_handler(Text(equals='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É!', ignore_case=True), state=None)
async def start_anketa(message: types.Message,  state: FSMContext) -> None:
    await Anketa_states_group.photo.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ!', reply_markup=get_cancel())

#–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: not message.photo, state=Anketa_states_group.photo)
async def check_photo(message: types.Message):
    return await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ')

#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ —Å–ø—Ä–∞–≤—à–∏–≤–∞–µ–º –æ–± –∏–º–µ–Ω–∏(–ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é)
@dp.message_handler(lambda message: message.photo, content_types=['photo'], state=Anketa_states_group.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await Anketa_states_group.next()
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è)')

#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç(–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é)
@dp.message_handler(state=Anketa_states_group.name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await Anketa_states_group.next()
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')

#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
@dp.message_handler(state=Anketa_states_group.age)
async def load_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text
    await Anketa_states_group.next()
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ(3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)')

#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º –≥–æ—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –≤–∏–¥–∞: —Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state=Anketa_states_group.desc)
async def load_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
    async with state.proxy() as data:
        await bot.send_photo(message.from_user.id,
                             photo=data['photo'],
                             caption=f'{data["name"]}, {data["age"]}\n{data["desc"]}')
    await state.finish()

# #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞
# @dp.message_handler(commands=['help'])
# async def help_command(message: types.Message):
#     await message.reply(HELP_LIST, parse_mode='HTML')
#
# #–≤—ã–∑–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
# @dp.message_handler(commands=['description'])
# async def description_command(message: types.Message):
#     await message.answer(DESCRIPTION)
#     await message.delete()
#
# #—Ç–µ—Å—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
# @dp.message_handler(commands=['feedback'])
# async def send_feedback(message: types.Message):
#     await message.answer(text='–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∫–∞–∫ —Ç–æ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞, —Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º –æ—Ç–∑—ã–≤!', reply_markup=get_inline_keyboard())
#
# #—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å
# @dp.message_handler()
# async def game(message: types.Message):
#     if message.text == '‚ù§Ô∏è':
#         await message.answer('üñ§')
#     else:
#         move = message.text
#         await message.answer(text=Rock_Paper_Scissors(move))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)